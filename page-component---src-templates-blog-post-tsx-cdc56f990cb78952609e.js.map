{"version":3,"sources":["webpack:///./src/templates/blog-post.tsx"],"names":[],"mappings":";;;;;;;;AAAA,mCAA+B;AAC/B,2CAA+B;AAC/B,iDAAsH;AAEtH,yCAAgD;AAShD,mBAAoC,KAArB;AACb,SAAM,EAAa,aAAM,MAAc,eAAQ,MAAK,KAAM;AAC1D,SAAY,SAAc,YAAO,OAAO,OAAS,SAAkB;AAEnE,SAAU,OAAQ,MAAK,KAAK,KAAY,YAAK,KACvC,IAAK,GAAJ,IAAS,oBAAC,oBAAK,SAAI,KAAK,OAAE,oBAAC,cAAI,WAAK,kBAAiB,GAAG,OAAwB;AAEvF,SAAa,gBAAa,KAAQ,QAAM,MAClC,IAAC,CAAC,EAAQ;AACZ,WAAkB,eAAO,KAAY,YAAO,OAAO,OAAS,SAAkB;AAC9E,WAAiB,cAAO,KAAY,YAAM,MAAS,SAAkB;AACrE,WAAc,QACZ,oBAAC,oBAAO,QAAM,aACZ,oBAAC,oBAAO,eACN,oBAAC,oBAAO,QAAO,UACV,KAAc,aAAqB,qBAAI,KACpC,QAAc,aAAqB,qBACzC,WACF,oBAAC,oBAAO,QAAQ,eACd,oBAAC,oBAAO,QAAO,UAAM,OAAE,EAAY,YAAO,SAC5B,YAAO,OACJ,KACjB,oBAAC,oBAAO,QAAS,YAAM,OAAE,EAAQ,QAAK,OACzB,YAKnB;AAEK,YACL,6BAAQ,KAAM,KAAO,OAAK,MAAO,OAAE,EAAc,eAAQ,+BACtD,oBAAI,QAAG,IAAE,cAAI,SACV,IAAM,KAAO,OAAK,MACf;AACA,cAAa,YAAqB,qBAAI;AACnC,iBAAa,YAAqB,qBACzC;AAHM,UAID,QAAM,KAAY,YAAM,OACzB,OAIb,OAXM;AAWH,IApCgB;AAsCd,8BACJ,oBAAS,iBACR,oBAAC,YAAS,SAAG,OACb,oBAAC,oBAAO,WAAS,gBAAM,OAAE,EAAQ,QAAU,YACzC,oBAAC,oBAAI,KAAM,aACT,oBAAC,oBAAI,YACH,oBAAC,oBAAI,KAAM,SAAK,MAAO,QAAM,OAAW,YACnC,KAAQ,OAAqB,qBAAI,KAC9B,QAAQ,OAAqB,qBACnC,WACF,oBAAC,oBAAI,KAAQ,eACX,oBAAC,oBAAI,KAAY,mBAAa,YAAO,OAAuB,KAC5D,oBAAC,oBAAI,KAAK,YAAa,YAAO,OAAiB,MAC/C,oBAAC,oBAAI,KAAM,aAAa,YAAY,oBAAe,YAG5C,iBACb,oBAAC,oBAAM,UAAG,IAAK,QAAa,YACpB,6BACT,oBAAO,WAAS,gBACV,OAAE,EAAQ,QAAU,UACF;AACf,eAER;AAHyB,QAF3B,CAlBF,EAwBE,oBAAC,oBAAO,WAAS,kBAEP,OACV,oBAAC,oBAAO,WAAS,kBACf,oBAAC,oBAAI,QAAO,cAAS,kBAM7B;AAAE;AAEW,SA2EX,+C","file":"page-component---src-templates-blog-post-tsx-cdc56f990cb78952609e.js","sourcesContent":["import * as React from \"react\";\nimport Link from \"gatsby-link\";\nimport { Header, Container, Segment, Icon, Label, Button, Grid, Card, Image, Item, Comment } from \"semantic-ui-react\";\nimport { MarkdownRemark, ImageSharp, MarkdownRemarkConnection } from \"../graphql-types\";\nimport BlogTitle from \"../components/BlogTitle\";\n\ninterface BlogPostProps {\n  data: {\n    post: MarkdownRemark;\n    recents: MarkdownRemarkConnection;\n  };\n}\n\nexport default (props: BlogPostProps) => {\n  const { frontmatter, html, timeToRead } = props.data.post;\n  const avatar = frontmatter.author.avatar.children[0] as ImageSharp;\n\n  const tags = props.data.post.frontmatter.tags\n    .map((tag) => <Label key={tag}><Link to={`/blog/tags/${tag}/`}>{tag}</Link></Label>);\n\n  const recents = props.data.recents.edges\n    .map(({ node }) => {\n      const recentAvatar = node.frontmatter.author.avatar.children[0] as ImageSharp;\n      const recentCover = node.frontmatter.image.children[0] as ImageSharp;\n      const extra = (\n        <Comment.Group>\n          <Comment>\n            <Comment.Avatar\n              src={recentAvatar.responsiveResolution.src}\n              srcSet={recentAvatar.responsiveResolution.srcSet}\n            />\n            <Comment.Content>\n              <Comment.Author style={{ fontWeight: 400 }}>\n                {frontmatter.author.id}\n              </Comment.Author>\n              <Comment.Metadata style={{ margin: 0 }}>\n                {timeToRead} min read\n              </Comment.Metadata>\n            </Comment.Content>\n          </Comment>\n        </Comment.Group>\n      );\n\n      return (\n        <div key={node.fields.slug} style={{paddingBottom: \"1em\"}}>\n          <Card as={Link}\n            to={node.fields.slug}\n            image={{\n              src: recentCover.responsiveResolution.src,\n              srcSet: recentCover.responsiveResolution.srcSet,\n            }}\n            header={node.frontmatter.title}\n            extra={extra}\n          />\n        </div>\n      );\n    });\n\n  return (\n    <Container>\n      <BlogTitle />\n      <Segment vertical style={{ border: \"none\" }}>\n        <Item.Group>\n          <Item>\n            <Item.Image size=\"tiny\" shape=\"circular\"\n              src={avatar.responsiveResolution.src}\n              srcSet={avatar.responsiveResolution.srcSet}\n            />\n            <Item.Content>\n              <Item.Description>{frontmatter.author.id}</Item.Description>\n              <Item.Meta>{frontmatter.author.bio}</Item.Meta>\n              <Item.Extra>{frontmatter.updatedDate} - {timeToRead} min read</Item.Extra>\n            </Item.Content>\n          </Item>\n        </Item.Group>\n        <Header as=\"h1\">{frontmatter.title}</Header>\n      </Segment>\n      <Segment vertical\n        style={{ border: \"none\" }}\n        dangerouslySetInnerHTML={{\n          __html: html,\n        }}\n      />\n      <Segment vertical>\n        {tags}\n      </Segment>\n      <Segment vertical>\n        <Grid padded centered>\n          {recents}\n        </Grid>\n      </Segment>\n    </Container>\n  );\n};\n\nexport const pageQuery = graphql`\n  query TemplateBlogPost($slug: String!) {\n  post: markdownRemark(fields: {slug: {eq: $slug}}) {\n    html\n    excerpt\n    timeToRead\n    fields {\n      slug\n    }\n    frontmatter {\n      tags\n      author {\n        id\n        bio\n        twitter\n        avatar {\n          children {\n            ... on ImageSharp {\n              responsiveResolution(width: 80, height: 80, quality: 100) {\n                src\n                srcSet\n              }\n            }\n          }\n        }\n      }\n      title\n      updatedDate(formatString: \"MMM D, YYYY\")\n    }\n  }\n  recents: allMarkdownRemark(\n    filter: {\n      fields: {slug: {ne: $slug}}\n      frontmatter: {draft: {ne: true}},\n      fileAbsolutePath: {regex: \"/blog/\"},\n    },\n    sort: {order: DESC, fields: [frontmatter___updatedDate]},\n    limit: 4\n  ) {\n    edges {\n      node {\n        fields {\n          slug\n        }\n        timeToRead\n        frontmatter {\n          title\n          image {\n            children {\n              ... on ImageSharp {\n                responsiveResolution(width: 300, height: 100) {\n                  src\n                  srcSet\n                }\n              }\n            }\n          }\n          author {\n            id\n            avatar {\n              children {\n                ... on ImageSharp {\n                  responsiveResolution(width: 36, height: 36) {\n                    src\n                    srcSet\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/templates/blog-post.tsx"],"sourceRoot":""}